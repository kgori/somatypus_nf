/*  SOMATYPUS NEXTFLOW CONFIG
    This is a place to set all the options relating to how the jobs run on
    the compute cluster. The file is initially set up with reasonable defaults
    for running on the LSF cluster used by the Sanger.

    See https://www.nextflow.io/docs/latest/config.html for more information.
*/

/*  Sanger's LSF setup requires that perJobMemLimit be set to true */
executor {
    perJobMemLimit = true
    queueSize = 200 /* max LSF jobs that can run concurrently */
}

/*  Set singularity.enabled and .autoMounts to true to use Singularity
    containers. Not required otherwise. Other container engines will use
    their own scopes, e.g. docker{ ... }, podman{ ... }, etc.
*/
singularity {
    enabled = true
    autoMounts = true
}

/*  The process scope sets the specific parameters for each job. Options set
    at the base level of the block are applied to all processes.
    Individual processes can be given their own sub-scopes using withName and
    withLabel directives. For example, the genotype-...-allele1 jobs will
    almost certainly run on bigger data sets than the other genotyping jobs,
    so they can be set up to use more resources.
*/
process {
    /* If using Cram file inputs, set the container's REF_PATH to whatever the 
       `sanger-samtools-refpath` module gives you, otherwise there may be
       errors trying to decode reads. */
    container = 'container/somatypus-dev.sif'
    containerOptions = '-B /lustre:/lustre -B /nfs:/nfs --env REF_PATH=/lustre/scratch125/core/sciops_repository/cram_cache/%2s/%2s/%s:/lustre/scratch126/core/sciops_repository/cram_cache/%2s/%2s/%s:URL=http:://refcache.dnapipelines.sanger.ac.uk::8000/%s'

    executor = 'lsf'
    queue = { if (task.time > 48.h) { 'basement' } else if (task.time > 12.h) { 'long' } else { 'normal' } }
    cpus = 1
    memory = 2.GB
    time = 4.h

    withName:individual_calling {
        cpus = { 8 * 2 ** (task.attempt - 1) }
        memory = { 2.GB * task.cpus }
        time = { 12.h * 2 ** (task.attempt - 1) }
        errorStrategy = 'retry'
        maxRetries = 2
    }

    withName:alternative_calling {
        cpus = { 8 * 2 ** (task.attempt - 1) }
        memory = { 2.GB * task.cpus }
        time = { 12.h * 2 ** (task.attempt - 1) }
        errorStrategy = 'retry'
        maxRetries = 2
    }

    withName:extract_indels {
        memory = { 4.GB * 2 ** (task.attempt - 1) }
        errorStrategy = 'retry'
        maxRetries = 2
    }

    withName:indel_flag2 {
        memory = { 2.GB * 2 ** (task.attempt - 1) }
        errorStrategy = 'retry'
        maxRetries = 2
    }

    withName:merge_filtered {
        memory = { 16.GB * 2 ** (task.attempt - 1) }
        errorStrategy = 'retry'
        maxRetries = 2
    }

    withName:merge_extracted_indels {
        memory = { 12.GB * 2 ** (task.attempt - 1) }
        errorStrategy = 'retry'
        maxRetries = 2
    }

    withName:genotype {
        cpus = 8
        memory = { 32.GB + 16.GB * (task.attempt - 1) }
        time = { 12.h + 8.h * (task.attempt - 1) }
        errorStrategy = 'retry'
        maxRetries = 2
    }

    withName:genotype_indels {
        cpus = 8
        memory = { 32.GB + 16.GB * (task.attempt - 1) }
        time = 48.h
        errorStrategy = 'retry'
        maxRetries = 2
    }

    withName:genotype_merged_snvs_allele1 {
        cpus = 8
        memory = { 64.GB + 16.GB * (task.attempt - 1) }
        time = 48.h
        errorStrategy = 'retry'
        maxRetries = 2
    }

    withName:genotype_indel_excluded_snvs_allele1 {
        cpus = 8
        memory = { 40.GB + 16.GB * (task.attempt - 1) }
        time = 48.h
        errorStrategy = 'retry'
        maxRetries = 2
    }

    withLabel:bcfmerge {
        cpus = 4
        memory = 8.GB
        time = 4.h
    }
}

